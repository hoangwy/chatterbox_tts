# Production Dockerfile for Chatterbox TTS Server
# Multi-stage build for optimized image size

# Stage 1: Build stage
FROM nvidia/cuda:12.4.1-devel-ubuntu22.04 AS builder

ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements and source code
COPY pyproject.toml ./
COPY setup.py ./
COPY uv.lock ./
COPY src/ ./src/

# Install Python dependencies
# Try pyproject.toml first, fallback to setup.py
RUN pip3 install --no-cache-dir --user . || pip3 install --no-cache-dir --user -e .

# Stage 2: Runtime stage
FROM nvidia/cuda:12.4.1-runtime-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_VISIBLE_DEVICES=0

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    python3 \
    python3-distutils \
    libsndfile1 \
    libsndfile1-dev \
    ffmpeg \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Python packages from builder
COPY --from=builder /root/.local /root/.local

# Make sure scripts in .local are usable
ENV PATH=/root/.local/bin:$PATH

# Set working directory
WORKDIR /app

# Copy application code
COPY src/ ./src/
COPY docs/ ./docs/
COPY t3-model/ ./t3-model/
COPY tts_server.py ./
COPY tts_server_api.py ./
COPY system_events.py ./
COPY configuration.py ./
COPY utils.py ./
COPY api/ ./api/

# Create audio directory and set permissions
RUN mkdir -p /app/audio && chmod 755 /app/audio

# Create non-root user
RUN useradd -m -u 1000 ttsuser && \
    chown -R ttsuser:ttsuser /app

USER ttsuser

# Expose port
EXPOSE 8081

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8081/ || exit 1

# Run the server
CMD ["python3", "tts_server.py"]
